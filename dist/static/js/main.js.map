{"version":3,"file":"static/js/main.js","mappings":"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","sources":["C:/Users/Admin/Desktop/hw3/My_todolist/src/App.jsx","C:/Users/Admin/Desktop/hw3/My_todolist/src/components/todo.jsx","C:/Users/Admin/Desktop/hw3/My_todolist/src/components/todoList.jsx","C:/Users/Admin/Desktop/hw3/My_todolist/src/App.css"],"sourcesContent":["// import { Switch, Route } from '@modern-js/runtime/router';\nimport { TodoList } from './components/todoList';\nimport './App.css';\n\nfunction App() {\n  return <TodoList>todos</TodoList>;\n}\n\nexport default App;\n","export function Floot(props) {\n  const { donecount,count, showstate, destroyall, showstate_all, showstate_active, showstate_completed } = props;\n  if (count != 0) {\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{(props.count-props.donecount)}</strong>\n          <span> </span>\n          <span>item</span>\n          <span> left</span>\n        </span>\n        <ul className=\"filters\">\n          <li className={props.showstate === 0 ? 'selected' : ''}>\n            <a onClick={showstate_all} href=\"#/\">\n              {' '}\n              All{' '}\n            </a>\n          </li>\n          <span> </span>\n          <li className={props.showstate === 1 ? 'selected' : ''}>\n            <a onClick={showstate_active} href=\"#/\">\n              {' '}\n              Active{' '}\n            </a>\n          </li>\n          <span> </span>\n          <li className={props.showstate === 2 ? 'selected' : ''}>\n            <a onClick={showstate_completed} href=\"#/\">\n              {' '}\n              Completed{' '}\n            </a>\n          </li>\n        </ul>\n        <button className=\"clear-completed\" onClick={destroyall}>\n          Clear completed\n        </button>\n      </footer>\n    );\n  } else {\n    return <footer></footer>;\n  }\n}\n","import React, { Component, useRef } from 'react';\nimport { Floot } from './todo';\n\nexport class TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputVal: '',\n      donecount: 0,\n      count: 0,\n      todolist: new Array(0),\n      donelist: new Array(0),\n      showstate: 0,\n      all: false,\n    };\n\n    this.addtodo = this.addtodo.bind(this);\n    this.showstate_all = this.showstate_all.bind(this);\n    this.showstate_active = this.showstate_active.bind(this);\n    this.showstate_completed = this.showstate_completed.bind(this);\n  }\n\n  addtodo(e) {\n    console.log(e.keyCode);\n    if (e.keyCode === 13) {\n      const jug = this.state.inputVal;\n      if (jug == '') {\n      } else {\n        let num = this.state.count;\n        num += 1;\n        const todoli = this.state.todolist.slice();\n        const doneli = this.state.donelist.slice();\n        const word = this.state.inputVal;\n        todoli.push(word);\n        doneli.push(false);\n        this.setState({\n          inputVal: '',\n          count: num,\n          todolist: todoli,\n          donelist: doneli,\n        });\n      }\n    }\n  }\n\n  toggleall() {\n    const arr = document.getElementsByClassName('toggle');\n    let num = this.state.count;\n    const copy1 = this.state.donelist.slice();\n    const isdoneall = this.state.all;\n    for (let i = 0; i < arr.length; ++i) {\n      arr[i].checked = !this.state.all;\n    }\n    for (let i = 0; i < this.state.count; i++) {\n      copy1[i] = !this.state.all;\n    }\n    this.setState({\n      donelist: copy1,\n      all: !isdoneall,\n    });\n    if(this.state.all==false){this.setState({donecount:num})}\n    else{this.setState({donecount:0})}\n  }\n\n  toggle(index) {\n    const copy = this.state.donelist.slice();\n    copy[index] = !copy[index];\n    let num = this.state.donecount;\n    if(copy[index]==1&&num>=0){num=num+1;}\n    else{num=num-1;}\n    this.setState({\n      donelist: copy,\n      donecount:num\n    });\n  }\n  handleChange = e => {\n    this.setState({\n      inputVal: e.target.value,\n    });\n  };\n\n  destroyall() {\n    const copy1 = this.state.donelist.slice();\n    const copy2 = this.state.todolist.slice();\n    let num = this.state.count;\n    for (let i = 0; i < this.state.count; ++i) {\n      if (copy1[i] === true) {\n        copy1.splice(i, 1);\n        copy2.splice(i, 1);\n        i--;\n        num -= 1;\n      }\n    }\n    const arr = document.getElementsByClassName('toggle');\n    for (let i = 0; i < arr.length; ++i) {\n      if (arr[i].checked) {\n        arr[i].checked = false;\n      }\n    }\n    this.setState({\n      todolist: copy2,\n      donelist: copy1,\n      count: num,\n      donecount:0\n    });\n  }\n\n  destroy(index) {\n    const copy = this.state.todolist.slice();\n    let num = this.state.count;\n    num -= 1;\n    copy.splice(index, 1);\n    this.setState({\n      count: num,\n      todolist: copy,\n    });\n  }\n  showstate_all() {\n    if (this.state.showstate === 0) {\n    } else {\n      this.setState({\n        showstate: 0,\n      });\n    }\n  }\n\n  showstate_active() {\n    if (this.state.showstate === 1) {\n    } else {\n      this.setState({\n        showstate: 1,\n      });\n    }\n  }\n\n  showstate_completed() {\n    if (this.state.showstate === 2) {\n    } else {\n      this.setState({\n        showstate: 2,\n      });\n    }\n  }\n\n  render() {\n    let arr;\n    if (this.state.showstate === 0) {\n      arr = this.state.todolist.slice();\n    } else if (this.state.showstate === 1) {\n      arr = [];\n      for (let i = 0; i < this.state.count; ++i) {\n        if (this.state.donelist[i] !== true) {\n          arr.push(this.state.todolist[i]);\n        }\n      }\n    } else {\n      arr = [];\n      for (let i = 0; i < this.state.count; ++i) {\n        if (this.state.donelist[i] === true) {\n          arr.push(this.state.todolist[i]);\n        }\n      }\n    }\n    return (\n      <div className=\"all\">\n        <section className=\"todoapp\">\n          <div>\n            <header className=\"header\">\n              <h1>{this.props.children}</h1>\n              <input\n                type=\"text\"\n                className=\"new-todo\"\n                placeholder=\"what needs to be done?\"\n                onKeyDown={this.addtodo}\n                onChange={this.handleChange}\n                value={this.state.inputVal}\n              />\n            </header>\n            <section className=\"main\">\n              <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n              <label htmlFor=\"toggle-all\" onClick={this.toggleall.bind(this)}>\n                ::before\n              </label>\n              <ul className=\"todo-list\">\n                {arr.map((item, index) => (\n                  <li\n                    key={index}\n                    className={\n                      (this.state.donelist[index] || this.state.showstate == 2) &&\n                      this.state.showstate != 1\n                        ? 'completed'\n                        : ''\n                    }>\n                    <input\n                      type=\"checkbox\"\n                      className=\"toggle\"\n                      id={`box${index}`}\n                      checked={\n                        (this.state.donelist[index] || this.state.showstate == 2) &&\n                        this.state.showstate != 1\n                      }\n                      onClick={this.toggle.bind(this, index)}\n                    />\n                    <label>{item}</label>\n                    <button\n                      className=\"destroy\"\n                      onClick={this.destroy.bind(this, index)}></button>\n                  </li>\n                ))}\n              </ul>\n            </section>\n            <Floot\n              donecount={this.state.donecount}\n              count={this.state.count}\n              showstate={this.state.showstate}\n              destroyall={this.destroyall.bind(this)}\n              showstate_all={this.showstate_all}\n              showstate_active={this.showstate_active}\n              showstate_completed={this.showstate_completed}\n            />\n          </div>\n        </section>\n        <footer class=\"info\">\n            <p><a href=\"https://github.com/tastejs/todomvc/tree/gh-pages/examples/react\"> Based on this example and fixed it's bug</a></p>\n            <p><a href=\"https://github.com/sjtuLLWWTT/Todolist_react\">Visit My Github</a></p>\n        </footer>\n      </div>\n    );\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport {};\n    if(module.hot) {\n      // 1648629130165\n      var cssReload = require(\"C:/Users/Admin/Desktop/hw3/My_todolist/node_modules/.pnpm/mini-css-extract-plugin@2.4.7_webpack@5.70.0/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"names":[],"sourceRoot":""}